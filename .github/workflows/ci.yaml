name: CI

on:
  push:
    branches:
    - main
    tags:
      - '*'
  pull_request:
    branches:
    - '*'
  schedule:
    - cron: '0 0 * * 1'  # weekly
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - R/running.R
          - R/app.R
          - R/app.R --metadata_json url('https://osf.io/hgacq/download') --phylogeny_json url('https://osf.io/6j4rg/download') --only_thru_mlsclust TRUE
          - R/app.R --metadata_json url('https://osf.io/hgacq/download') --phylogeny_json url('https://osf.io/6j4rg/download') --only_thru_thresholds TRUE
          - R/app.R --metadata_json url('https://osf.io/hgacq/download') --phylogeny_json url('https://osf.io/6j4rg/download') --only_thru_stats TRUE
          - R/app.R --max_date as.date('2020-10-15')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: oleksiyrudenko/gha-git-credentials@v2.1.1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Install required system libraries
          sudo apt-get install -y \
            build-essential \
            cmake \
            curl \
            libblas-dev \
            libbz2-dev \
            libcurl4-openssl-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libgit2-dev \
            libharfbuzz-dev \
            libicu-dev \
            liblapack-dev \
            liblzma-dev \
            libfribidi-dev \
            libjpeg-dev \
            libpng-dev \
            libssl-dev \
            libtiff5-dev \
            libxml2-dev \
            zlib1g-dev

      - name: Set up R 4.4.3
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.3'

      # https://github.com/actions/cache/blob/5a3ec84eff668545956fd18022155c47e93e2684/examples.md#r---renv
      - name: Set RENV_PATHS_ROOT
        shell: bash
        run: |
          echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

      # https://github.com/actions/cache/blob/5a3ec84eff668545956fd18022155c47e93e2684/examples.md#r---renv
      - name: Get R and OS version
        id: get-version
        run: |
          cat("##[set-output name=os-version;]", sessionInfo()$running, "\n", sep = "")
          cat("##[set-output name=r-version;]", R.Version()$version.string, sep = "")
        shell: Rscript {0}

      # https://github.com/actions/cache/blob/5a3ec84eff668545956fd18022155c47e93e2684/examples.md#r---renv
      - name: Restore Renv package cache
        uses: actions/cache@v4
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{ inputs.cache-version }}-${{ hashFiles('renv.lock') }}
          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Install R dependencies
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Rscript -e 'install.packages("devtools", repos = "https://cloud.r-project.org")'
          Rscript -e 'devtools::install_github("YuLab-SMU/ggtree@c17773c973d6c4036ee3af40a3957fb74d8ee9ff")'
          Rscript -e 'devtools::install_github("mmore500/mlscluster@85a39581ed84726c29afb8b5ae74b5f524b998df")'

      - uses: r-lib/actions/setup-renv@v2
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      - name: Run R script
        run: |
          timeout 30m Rscript ${{ matrix.target }} \
            || ( [[ $? -eq 124 ]] && \
            echo "timing out to prevent job kill due to resource use" )

      - name: Consolidate output to results/
        run: |
          mkdir -p results
          mv Rplots.pdf results/ || echo "Rplots.pdf not found"
          mv stat_results results/ || echo "stat_results not found"
          tar -czvf results.tar.gz results/

      - name: Slugify matrix.target
        id: slugify
        run: |
          RAW_TARGET="${{ matrix.target }}"
          SLUG=$(echo "$RAW_TARGET" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')
          echo "slug=$SLUG" >> $GITHUB_OUTPUT

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ steps.slugify.outputs.slug }}
          path: results.tar.gz

  deploy-ghcr:
    name: Docker Image Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set Tags
        id: set_tags
        run: |
          if [[ "${GITHUB_REF_NAME}" != *merge ]]; then
            echo "TAGS=latest,${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "TAGS=latest" >> $GITHUB_ENV
          fi
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v1
        with:
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
          load: true
          tags: ${{ env.TAGS }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: mmore500/mlscluster-experiments
          registry: ghcr.io
          add_git_labels: true

      - name: Test built container smoke
        run: |
          # works with the locally built image even if it wasn't pushed
          docker run --rm ghcr.io/mmore500/mlscluster-experiments:latest echo "smoke test ok"
      - name: Test built container CMD
        run: |
          # works with the locally built image even if it wasn't pushed
          docker run --rm ghcr.io/mmore500/mlscluster-experiments:latest
          echo "Container CMD executed successfully!"

  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Install required system libraries
          sudo apt-get install -y \
            build-essential \
            cmake \
            curl
      - name: Checkout repository
        uses: actions/checkout@v3
      - run: ./style.sh
